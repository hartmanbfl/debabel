import Head from 'next/head'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import { useRouter } from 'next/router'
import { useEffect, useState } from 'react'
import socket from '../src/socket'
import { livestreamEvent, initializeLivestreamController } from '../src/LivestreamController'

import LogoComponent from '@/src/LogoComponent'
import LanguageButtonDropdownComponent from '@/src/LanguageButtonDropdownComponent'
import PageHeaderComponent from '@/src/PageHeaderComponent'
import WelcomeMessageComponent from '@/src/WelcomeMessageComponent'
import ServiceStatusComponent from '@/src/ServiceStatusComponent'

const inter = Inter({ subsets: ['latin'] })

const Home = () => {
  const router = useRouter()

  // Get any query parameters
  const { serviceId } = router.query;

  const [livestream, setLivestream] = useState("OFF");
  const [languageMap, setLanguageMap] = useState([]);
  const [defaultServiceId, setDefaultServiceId] = useState("");
  const [serviceCode, setServiceCode] = useState("")
  const [serviceReady, setServiceReady] = useState(false);


  const [churchWelcome, setChurchWelcome] = useState({
    greeting: "",
    messages: [],
    additionalMessage: ""
  });

  const serverName = process.env.NEXT_PUBLIC_SERVER_NAME;

  useEffect(() => {
    // Get the specific church properties from the server
    const fetchData = async () => {
      const response = await fetch(`${serverName}/churchinfo`);
      const data = await response.json();
      if (data.translationLanguages != null) {
        setLanguageMap(JSON.parse(data.translationLanguages));
      }
      setDefaultServiceId(data.defaultServiceId);
      const churchMessages = JSON.parse(data.message);
      setChurchWelcome({ greeting: data.greeting, messages: churchMessages, additionalMessage: data.additionalWelcome })
    }

    fetchData();
  }, [])

  // When we have a valid service code and that service ID is actively being controlled
  // on the server side, then register the app.
  useEffect(() => {
    if (serviceCode != null && serviceCode.length > 0 && serviceReady) {
      console.log(`Received Service ID: ${serviceCode}`);
      socket.emit('register', serviceCode);
    }
  }, [serviceCode, serviceReady])

  useEffect(() => {
    // Need to check if the router is ready before trying to get the serviceId
    // from the query parameter. Also the default needs to be received from
    // the server
    if (router.isReady && defaultServiceId.length > 0 ) {
      socketInitializer(), []
    }
  }, [router.isReady, defaultServiceId])


  // Make sure the server side has initialized this service before
  // trying to register
  const handleServiceStatusCallback = (serviceStatusData) => {
    const { active } = serviceStatusData;
    console.log(`Setting service ready to ${active}`);
    setServiceReady(active);
  }
  useEffect(() => {
    console.log(`The service status is now: ${serviceReady}`);
  }, [serviceReady]);

  const socketInitializer = () => {
    socket.connect();
    socket.on('connect', () => {
      console.log(`${socket.id} connected to the socket`);

      if (serviceId == null || serviceId.length == 0 || serviceId == "") {
        console.log(`Service ID not defined so using default ID from server of: ${defaultServiceId}`);
        setServiceCode(defaultServiceId);
      } else {
        setServiceCode(serviceId);
      }
    })

    socket.on('disconnect', (reason) => {
      console.log(`${socket.id} disconnected from the socket.  Reason-> ${reason}`);
    })

    initializeLivestreamController();
    const livestreamSubscription = livestreamEvent.subscribe((event) => {
      //DEBUG      console.log(`Livestream is now: ${event.status}`);
      setLivestream(event.status);
    })
  }

  return (
    <>
      <Head>
        <title>DeBabel Translation App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
      </Head>
      <div className={styles.container}>
        <ServiceStatusComponent serviceId={serviceCode} parentCallback={handleServiceStatusCallback} />
        <PageHeaderComponent textLabel="DeBabel" sessionStatus={livestream} />
        <div className={styles.home}>
          <div className={styles.inputBox}>
            <LogoComponent serverName={serverName} />
            {/* */}
            <WelcomeMessageComponent churchWelcome={churchWelcome} />
          </div>
          {serviceReady && 
             <LanguageButtonDropdownComponent serviceId={serviceCode} languages={languageMap} />
          }
        </div>
      </div>
    </>
  )
}

export default Home;
